#include <cstddef>
#include <pybind11/pybind11.h>
#include <pybind11/eigen.h>
#include <glmnetpp>
#include "driver.h"
#include "internal.h"
#include "update_pb.h"

using namespace glmnetpp;
namespace py = pybind11;


// Compute cumsum with a padding of 0 at the beginning
// @param sequence input sequence [ro]
// @param output output sequence  [w]
py_dictvoid forward_cumsum(const std::vector<T> sequence,
		       std::vector<T> output)
{
  T sum = (T) 0;
  output[0] = sum;
  auto j = std::next(output.begin());
  for (auto i = sequence.begin(); i != sequence.end(); ++i, ++j) {
    sum += sequence[i];
    output[j] = sum;
  }
}







py::dict gaussnet_exp(
    int ka,
    double parm,
    int ni,
    int no,
    Eigen::Ref<Eigen::MatrixXd> x,          // TODO: map?
    Eigen::Ref<Eigen::VectorXd> y,          // TODO: map?
    Eigen::Ref<Eigen::VectorXd> w,          // TODO: figure out if we should allow updating (safe choice is to copy)
    const Eigen::Ref<Eigen::VectorXi> jd,
    const Eigen::Ref<Eigen::VectorXd> vp,
    Eigen::Ref<Eigen::MatrixXd> cl,         // TODO: map?
    int ne,
    int nx,
    int nlam,
    double flmin,
    const Eigen::Ref<Eigen::VectorXd> ulam,
    double thr,
    int isd,
    int intr,
    int maxit,
    py::object pb,
    int lmu,
    Eigen::Ref<Eigen::VectorXd> a0,
    Eigen::Ref<Eigen::MatrixXd> ca,
    Eigen::Ref<Eigen::VectorXi> ia,
    Eigen::Ref<Eigen::VectorXi> nin,
    Eigen::Ref<Eigen::VectorXd> rsq,
    Eigen::Ref<Eigen::VectorXd> alm,
    int nlp,
    int jerr,
    double fdev,   // begin glmnet.control
    double eps,
    double big,
    int mnlam,
    double devmax,
    double pmin,
    double exmx,
    int itrace,
    double prec,
    int mxit,
    double epsnr,
    int mxitnr     //end glmnet.control
    )

#include <iostream>

// Compute cumsum with a padding of 0 at the beginning
// @param sequence input sequence [ro]
// @param output output sequence  [w]
template <class T>
void forward_cumsum(const std::vector<T> sequence,
		       std::vector<T> output)
{
  T sum = (T) 0;
  output[0] = sum;
  auto j = std::next(output.begin());
  for (auto i = sequence.begin(); i != sequence.end(); ++i, ++j) {
    sum += sequence[i];
    output[j] = sum;
  }
}


int main(int argc, char **argv) {
  std::vector<int> myVector = {1, 2, 3, 4, 5};
  std::vector<int> outVector(5);
  forward_cumsum<int>(myVector, outVector);
  for (auto i = outVector.begin(); i != outVector.end(); i++) {
    printf("%d ", outVector(i));
  }
  printf("\n");
  return(0);
}
